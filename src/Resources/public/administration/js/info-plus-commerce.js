!function(){var e={840:function(){},834:function(){},715:function(){},663:function(){},703:function(e,t,i){var s=i(840);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("2be80be6",s,!0,{})},805:function(e,t,i){var s=i(834);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("4dd341de",s,!0,{})},768:function(e,t,i){var s=i(715);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("e39a18b8",s,!0,{})},214:function(e,t,i){var s=i(663);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("d30fc106",s,!0,{})},534:function(e,t,i){"use strict";function s(e,t){for(var i=[],s={},o=0;o<t.length;o++){var n=t[o],a=n[0],l={id:e+":"+o,css:n[1],media:n[2],sourceMap:n[3]};s[a]?s[a].parts.push(l):i.push(s[a]={id:a,parts:[l]})}return i}i.d(t,{A:function(){return f}});var o,n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},l=n&&(document.head||document.getElementsByTagName("head")[0]),r=null,c=0,d=!1,u=function(){},p=null,h="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,i,o){d=i,p=o||{};var n=s(e,t);return g(n),function(t){for(var i=[],o=0;o<n.length;o++){var l=a[n[o].id];l.refs--,i.push(l)}t?g(n=s(e,t)):n=[];for(var o=0;o<i.length;o++){var l=i[o];if(0===l.refs){for(var r=0;r<l.parts.length;r++)l.parts[r]();delete a[l.id]}}}}function g(e){for(var t=0;t<e.length;t++){var i=e[t],s=a[i.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](i.parts[o]);for(;o<i.parts.length;o++)s.parts.push(w(i.parts[o]));s.parts.length>i.parts.length&&(s.parts.length=i.parts.length)}else{for(var n=[],o=0;o<i.parts.length;o++)n.push(w(i.parts[o]));a[i.id]={id:i.id,refs:1,parts:n}}}}function y(){var e=document.createElement("style");return e.type="text/css",l.appendChild(e),e}function w(e){var t,i,s=document.querySelector("style["+h+'~="'+e.id+'"]');if(s){if(d)return u;s.parentNode.removeChild(s)}if(m){var o=c++;t=C.bind(null,s=r||(r=y()),o,!1),i=C.bind(null,s,o,!0)}else t=b.bind(null,s=y()),i=function(){s.parentNode.removeChild(s)};return t(e),function(s){s?(s.css!==e.css||s.media!==e.media||s.sourceMap!==e.sourceMap)&&t(e=s):i()}}var v=(o=[],function(e,t){return o[e]=t,o.filter(Boolean).join("\n")});function C(e,t,i,s){var o=i?"":s.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var n=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(n,a[t]):e.appendChild(n)}}function b(e,t){var i=t.css,s=t.media,o=t.sourceMap;if(s&&e.setAttribute("media",s),p.ssrId&&e.setAttribute(h,t.id),o&&(i+="\n/*# sourceURL="+o.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(s){var o=t[s];if(void 0!==o)return o.exports;var n=t[s]={id:s,exports:{}};return e[s](n,n.exports,i),n.exports}i.d=function(e,t){for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/infopluscommerce/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/infopluscommerce/"),function(){"use strict";let{Component:e,Mixin:t}=Shopware;e.register("sync-button",{template:'<template>\n    <sw-button @click="triggerSync" id="infoplus-sync-btn" variant="primary">\n        {{ syncButtonText }}\n    </sw-button>\n    <span style="margin-left: 10px"> {{ lastSyncTime }} </span>\n</template>',inject:["notification"],mixins:[t.getByName("notification")],created(){this.fetchSyncStatus()},data(){return{lastSyncTime:"",syncButtonText:this.$tc("infoplus.sync.startSynchronization")}},methods:{fetchSyncStatus(){fetch("/api/_action/infoplus/config",{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>e.json()).then(e=>{let t=!!e.syncInProgress;if(this.syncButtonText=t?this.$tc("infoplus.sync.synchronizingInBackground"):this.$tc("infoplus.sync.startSynchronization"),e.lastSyncTime){let t=new Date(e.lastSyncTime);this.lastSyncTime=this.$tc("infoplus.sync.lastSuccessfulSync")+" "+t.toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}else this.lastSyncTime=t?"":this.$tc("infoplus.sync.neverSynchronized");let i=document.getElementById("infoplus-sync-btn");i&&(i.disabled=t)})},triggerSync(){fetch("/api/_action/infoplus/sync/all",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return e.json()}).then(()=>{let e=document.getElementById("infoplus-sync-btn");e&&(e.disabled=!0,e.textContent=this.$tc("infoplus.sync.synchronizingInBackground"),this.createNotificationSuccess({message:this.$tc("infoplus.sync.synchronizationStarted")}))}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.sync.errorTitle"),message:this.$tc("infoplus.sync.synchronizationFailed")+e});let t=document.getElementById("infoplus-sync-btn");t&&(t.disabled=!1,t.textContent=this.$tc("infoplus.sync.startSynchronization"))})}}});let{Component:s,Mixin:o}=Shopware;s.register("infoplus-switch",{template:'<template>\n    <sw-switch-field\n            :label="label"\n            :name="name"\n            v-model="isChecked"\n            @update:value="handleClick"\n    />\n</template>',inject:["repositoryFactory","systemConfigApiService"],mixins:[o.getByName("notification")],props:{label:String,name:String},data(){return{isChecked:!1,inProgress:!1}},created(){this.loadConfig()},methods:{async loadConfig(){try{let e=(await this.systemConfigApiService.getValues("InfoPlusCommerce.config"))[this.name];this.isChecked=!!e}catch(e){console.error("Config load error:",e),this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configLoadFailed")})}},async saveConfig(e,t){try{await this.systemConfigApiService.saveValues({[e]:t}),this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:this.$tc("infoplus.notifications.success.configSaved")})}catch(e){console.error("Config save error:",e),this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configSaveFailed")})}},async handleClick(){if(this.inProgress)return;this.inProgress=!0;let e=document.getElementById(this.name);this.isChecked=e.checked;let t=document.getElementById("InfoPlusCommerce.config.syncProducts"),i=document.getElementById("InfoPlusCommerce.config.syncCategories"),s=document.getElementById("InfoPlusCommerce.config.syncOrders"),o=document.getElementById("InfoPlusCommerce.config.syncCustomers"),n=document.getElementById("InfoPlusCommerce.config.syncInventory");if(!t||!i||!s||!o||!n){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configLoadFailed")}),this.inProgress=!1;return}let a=[];!s.checked||t.checked&&i.checked&&o.checked?n.checked&&!t.checked?(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementInventory")}),e.checked=!e.checked,this.isChecked=!this.isChecked):t.checked&&!i.checked?(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementProducts")}),e.checked=!e.checked,this.isChecked=!this.isChecked):a.push(this.saveConfig(this.name,this.isChecked)):(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementOrders")}),e.checked=!e.checked,this.isChecked=!this.isChecked),await Promise.all(a).finally(()=>{this.inProgress=!1,this.$emit("input",this.isChecked)})}}});let{Component:n,Mixin:a}=Shopware;n.register("infoplus-categories",{template:'<template>\n    <div class="infoplus-categories">\n        <div class="infoplus-content" style="display: flex; justify-content: flex-end; margin-bottom: 20px;">\n            <sw-button\n                    variant="primary"\n                    @click="addNewCategory"\n            >\n                {{ $tc(\'infoplus.category.createNew\') }}\n            </sw-button>\n        </div>\n        <sw-card>\n            <sw-data-grid\n                    :dataSource="categories"\n                    :actions="true"\n                    :columns="[\n                    { property: \'internalId\', label: $tc(\'infoplus.category.columns.infoplusId\') },\n                    { property: \'name\', label: $tc(\'infoplus.category.columns.name\') }\n                    ]"\n                    :showSelection="false"\n            >\n                <template #actions="{ item }">\n\n                    <sw-context-menu-item @click="editCategory(item)">\n                        {{ $tc(\'infoplus.category.edit\') }}\n                    </sw-context-menu-item>\n                    <sw-context-menu-item @click="deleteCategory(item)">\n                        {{ $tc(\'infoplus.category.delete\') }}\n                    </sw-context-menu-item>\n                </template>\n            </sw-data-grid>\n        </sw-card>\n    </div>\n</template>',inject:["notification"],mixins:[a.getByName("notification")],props:{isLoading:Boolean},data(){return{categories:[],isSubCategory:!1,showDeleteModal:!1,categoryToDelete:null}},created(){this.$route.path.includes("subCategories")?this.isSubCategory=!0:this.isSubCategory=!1,this.fetchCategories()},watch:{$route(e){e.path.includes("subCategories")?this.isSubCategory=!0:this.isSubCategory=!1,this.fetchCategories()}},methods:{async fetchCategories(){try{let e=await fetch(`/api/_action/infoplus/getAllCategories/${this.isSubCategory?"1":"0"}`,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to fetch categories");let t=await e.json();this.categories=t||[]}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.fetchCategoriesFailed",0,{message:e.message})})}},addNewCategory(){this.$router.push({name:"infoplus.settings.addCategory",params:{isSubCategory:this.isSubCategory}})},editCategory(e){this.$router.push({name:"infoplus.settings.editCategory",params:{isSubCategory:this.isSubCategory,id:e.id}})},async deleteCategory(e){this.categoryToDelete=e,this.showDeleteModal=!0},async confirmDeleteCategory(){try{let e=await fetch(`/api/_action/infoplus/delete/category/${this.categoryToDelete.id}`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to delete category");let t=await e.json();t.success?this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:t.message||this.$tc("infoplus.notifications.success.categoryDeleted")}):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:t.message||this.$tc("infoplus.notifications.error.deleteCategoryFailed",0,{message:""})}),await this.fetchCategories()}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.deleteCategoryFailed",0,{message:e.message})})}finally{this.showDeleteModal=!1,this.categoryToDelete=null}},cancelDeleteCategory(){this.showDeleteModal=!1,this.categoryToDelete=null}}}),i(768),Shopware.Component.register("log-viewer",{template:'<template>\n    <sw-card title="InfoPlus Logs" :is-loading="isLoading">\n        <template v-if="error">\n            <sw-alert variant="error">{{ error }}</sw-alert>\n        </template>\n\n        <template v-else>\n            <div v-if="paginatedLogs.length">\n                <sw-data-grid\n                    :dataSource="paginatedLogs"\n                    :actions="true"\n                    :columns="columns"\n                    :showSelection="false"\n                    @click="onViewLog(item)"\n                >\n                    <template #actions="{ item }">\n                        <sw-context-menu-item @click="onViewLog(item)">\n                            {{ $tc(\'infoplus.logs.actions.view\') }}\n                        </sw-context-menu-item>\n                        <sw-context-menu-item @click="onDownloadLog(item)">\n                            {{ $tc(\'infoplus.logs.actions.download\') }}\n                        </sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n                <div>\n                    <sw-pagination\n                        :total="logs.length"\n                        :limit="pagination.limit"\n                        :page="pagination.page"\n                        @page-change="onPageChange"\n                    />\n                </div>\n            </div>\n            <p v-else>{{ $tc(\'infoplus.logs.noLogsAvailable\') }}</p>\n        </template>\n    </sw-card>\n</template>\n',inject:["infoplusLogApiService"],data(){return{logs:[],isLoading:!0,error:null,pagination:{page:1,limit:10},limitOptions:[{value:5,label:"5"},{value:10,label:"10"},{value:25,label:"25"},{value:50,label:"50"}],columns:[{property:"file",label:this.$tc("infoplus.logs.columns.file")}],rowActions:[{label:this.$tc("infoplus.logs.actions.view"),action:"view",icon:"default-eye"},{label:this.$tc("infoplus.logs.actions.download"),action:"download",icon:"default-arrow-down"}]}},computed:{paginatedLogs(){if(!this.logs||0===this.logs.length)return[];let e=(this.pagination.page-1)*this.pagination.limit;return this.logs.slice(e,e+this.pagination.limit)}},created(){this.loadData()},methods:{async loadData(){this.isLoading=!0,this.error=null;try{let e=await this.infoplusLogApiService.getLogs();this.logs=e.logs||[];let t=Math.max(1,Math.ceil(this.logs.length/this.pagination.limit));this.pagination.page>t&&(this.pagination.page=t)}catch(e){this.error=e?.response?.data?.errors?.[0]?.detail||this.$tc("infoplus.logs.errorLoadLogs")}finally{this.isLoading=!1}},onPageChange(e){this.pagination.page=e.page,this.pagination.limit=e.limit},onViewLog(e){this.$router.push({name:"infoplus.settings.logDetail",params:{file:e.file}})},async onDownloadLog(e){try{let t=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},i=`/api/_action/infoplus/logs/${encodeURIComponent(e.file)}/download`,s=await fetch(i,{method:"GET",headers:t});if(!s.ok)throw Error("Download failed: "+s.statusText);let o=await s.blob(),n=document.createElement("a");n.href=window.URL.createObjectURL(o),n.download=e.file,n.click(),window.URL.revokeObjectURL(n.href)}catch(e){this.error=this.$tc("infoplus.notifications.error.downloadFailed",0,{message:e.message})}},onRowAction(e,t){"view"===e?this.onViewLog(t):"download"===e&&this.onDownloadLog(t)}}});let{Component:l,Mixin:r}=Shopware;l.register("infoplus-sync-settings",{template:'<template>\n    <sw-container>\n        <sw-card :title="$tc(\'infoplus.settings.syncSettings\')" :isLoading="isLoading"\n                 style="margin-top:20px;">\n            <infoplus-switch :label="$tc(\'infoplus.syncCategories\')"\n                             name="InfoPlusCommerce.config.syncCategories" style="margin-top:-10px;"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncProducts\')"\n                             name="InfoPlusCommerce.config.syncProducts"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncCustomers\')"\n                             name="InfoPlusCommerce.config.syncCustomers"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncOrders\')" name="InfoPlusCommerce.config.syncOrders"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncInventory\')"\n                             name="InfoPlusCommerce.config.syncInventory"/>\n            <sync-button/>\n        </sw-card>\n    </sw-container>\n</template>\n',mixins:[r.getByName("notification")],data(){return{isLoading:!1,activeTab:"sync-settings",config:{apiKey:"",baseDomain:"",warehouseId:""}}},created(){this.systemConfigApiService=Shopware.Service("systemConfigApiService"),this.loadConfig()},methods:{loadConfig(){this.isLoading=!0,this.systemConfigApiService.getValues("InfoPlusCommerce").then(e=>{this.config.apiKey=e["InfoPlusCommerce.config.apiKey"]||"",this.config.baseDomain=e["InfoPlusCommerce.config.baseDomain"]||"",this.config.warehouseId=e["InfoPlusCommerce.config.warehouseId"]||"",this.isLoading=!1})},saveConfig(){this.isLoading=!0;let e={"InfoPlusCommerce.config.apiKey":this.config.apiKey,"InfoPlusCommerce.config.baseDomain":this.config.baseDomain,"InfoPlusCommerce.config.warehouseId":this.config.warehouseId};this.systemConfigApiService.saveValues(e).finally(()=>{this.isLoading=!1,this.createNotificationSuccess({title:this.$tc("infoplus.sync.success"),message:this.$tc("infoplus.sync.configurationSaved")})})}}});let{Component:c,Mixin:d}=Shopware;c.register("infoplus-customfields",{template:'<template>\n    <div class="infoplus-customfields">\n        <div class="infoplus-content" style="display: flex; justify-content: flex-end; margin-bottom: 20px;">\n            <sw-button\n                    variant="primary"\n                    @click="addNewCustomField"\n            >\n                {{ $tc(\'infoplus.customfield.createNew\') }}\n            </sw-button>\n        </div>\n        <sw-card>\n            <sw-data-grid\n                    :dataSource="customFields"\n                    :actions="true"\n                    :columns="[\n                    { property: \'technicalName\', label: $tc(\'infoplus.customfield.columns.technicalName\') },\n                    { property: \'label\', label: $tc(\'infoplus.customfield.columns.label\') },\n                    { property: \'type\', label: $tc(\'infoplus.customfield.columns.type\') },\n                    { property: \'active\', label: $tc(\'infoplus.customfield.columns.active\') }\n                    ]"\n                    :showSelection="false"\n            >\n                <template #actions="{ item }">\n                    <sw-context-menu-item @click="editCustomField(item)">\n                        {{ $tc(\'infoplus.customfield.edit\') }}\n                    </sw-context-menu-item>\n                    <sw-context-menu-item @click="deleteCustomField(item)">\n                        {{ $tc(\'infoplus.customfield.delete\') }}\n                    </sw-context-menu-item>\n                </template>\n            </sw-data-grid>\n        </sw-card>\n    </div>\n</template>\n',mixins:[d.getByName("notification")],data(){return{isLoading:!1,customFields:[]}},created(){this.loadCustomFields()},methods:{async loadCustomFields(){this.isLoading=!0;try{let e=await fetch("/api/_action/infoplus/customfields/all",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to fetch custom fields");this.customFields=await e.json()}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}finally{this.isLoading=!1}},addNewCustomField(){this.$router.push({name:"infoplus.settings.addCustomField"})},editCustomField(e){this.$router.push({name:"infoplus.settings.editCustomField",params:{id:e.id}})},async deleteCustomField(e){try{if(!(await fetch(`/api/_action/infoplus/customfields/${e.id}`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})).ok)throw Error("Failed to delete custom field");this.createNotificationSuccess({title:this.$tc("infoplus.customfield.delete"),message:this.$tc("infoplus.customfield.deleted")}),this.loadCustomFields()}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}}}});let{Component:u,Mixin:p}=Shopware;u.register("infoplus-new-category",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content">\n                <sw-card :title="$tc(\'infoplus.category.addTitle\')">\n                    <sw-text-field\n                            v-model:value="categoryName"\n                            :label="$tc(\'infoplus.category.name\')"\n                            name="categoryName"\n                            :placeholder="$tc(\'infoplus.category.namePlaceholder\')"\n                            :disabled="isLoading"\n                    ></sw-text-field>\n                    <sw-checkbox-field\n                            v-model:value="isSubCategory"\n                            :label="$tc(\'infoplus.category.subCategory\')"\n                            name="isSubCategory"\n                            :disabled="isLoading"/>\n                    <sw-button\n                            variant="primary"\n                            :disabled="isLoading"\n                            @click="saveCategory"\n                    >\n                        {{ $tc(\'infoplus.category.save\') }}\n                    </sw-button>\n                    <sw-button\n                            variant="ghost"\n                            :disabled="isLoading"\n                            @click="$router.back()"\n                    >\n                        {{ $tc(\'infoplus.category.cancel\') }}\n                    </sw-button>\n                </sw-card>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["notification"],mixins:[p.getByName("notification")],data(){return{categoryName:"",isSubCategory:!1,isLoading:!1}},created(){this.isSubCategory=this.$route.params.isSubCategory||!1},methods:{async saveCategory(){if(!this.categoryName.trim()){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.categoryNameRequired")});return}this.isLoading=!0;try{let e=await fetch("/api/_action/infoplus/createCategory",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({name:this.categoryName,isSubCategory:this.isSubCategory})});if(!e.ok)throw Error("Failed to create category");let t=await e.json();t.success?(this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:t.message||this.$tc("infoplus.notifications.success.categoryCreated")}),this.$router.back()):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:t.message||this.$tc("infoplus.notifications.error.failedToCreateCategory",0,{message:""})})}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToCreateCategory",0,{message:e.message})})}finally{this.isLoading=!1}}}});let{Component:h,Mixin:m}=Shopware;h.register("infoplus-edit-category",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content">\n                <sw-card :title="$tc(\'infoplus.category.editTitle\')">\n                    <sw-text-field\n                            v-model:value="categoryName"\n                            :label="$tc(\'infoplus.category.name\')"\n                            name="categoryName"\n                            :placeholder="$tc(\'infoplus.category.namePlaceholder\')"\n                            :disabled="isLoading"\n                    ></sw-text-field>\n\n                    <sw-button\n                            variant="primary"\n                            :disabled="isLoading"\n                            @click="saveCategory"\n                    >\n                        {{ $tc(\'infoplus.category.save\') }}\n                    </sw-button>\n                    <sw-button\n                            variant="ghost"\n                            :disabled="isLoading"\n                            @click="$router.back()"\n                    >\n                        {{ $tc(\'infoplus.category.cancel\') }}\n                    </sw-button>\n                </sw-card>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["notification"],mixins:[m.getByName("notification")],data(){return{category:null,categoryName:"",isLoading:!1}},computed:{isSubCategory(){return this.$route.params.isSubCategory||!1}},created(){this.loadCategory()},methods:{async loadCategory(){this.isLoading=!0;try{let e=await fetch(`/api/_action/infoplus/getCategory/${this.$route.params.id}`,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to fetch category");let t=await e.json();this.category=t,this.categoryName=t.name||""}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToFetchCategory",0,{message:e.message})}),this.$router.push({name:"infoplus-categories"})}finally{this.isLoading=!1}},async saveCategory(){if(!this.categoryName.trim()){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.categoryNameRequired")});return}this.isLoading=!0;try{let e=await fetch(`/api/_action/infoplus/updateCategory/${this.$route.params.id}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({name:this.categoryName,isSubCategory:this.isSubCategory})});if(!e.ok)throw Error("Failed to update category");let t=await e.json();t.success?(this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:t.message||this.$tc("infoplus.notifications.success.categoryUpdated")}),this.$router.back()):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:t.message||this.$tc("infoplus.notifications.error.failedToUpdateCategory",0,{message:""})})}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToUpdateCategory",0,{message:e.message})})}finally{this.isLoading=!1}}}}),Shopware.Component.register("infoplus-log-detail",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content" style="display: flex; justify-content: flex-end; margin-bottom: 20px;">\n                <sw-button variant="secondary" @click="$router.back()">{{ $tc(\'infoplus.logs.back\') }}</sw-button>\n            </div>\n            <sw-card :title="$tc(\'infoplus.logs.title\', 0, { file: file })" :is-loading="isLoading">\n                <template v-if="error">\n                    <sw-alert variant="error">{{ error }}</sw-alert>\n                </template>\n                <template v-else>\n                    <div class="log-content" style="overflow-x: scroll">\n                        <div v-for="line in lines" :key="lineIndex(line)" style="margin: 5px 0;">\n                            <pre>{{ line }}</pre>\n                        </div>\n                    </div>\n                    <sw-pagination\n                            :total="totalLines"\n                            :limit="pagination.limit"\n                            :page="pagination.page"\n                            @page-change="onPageChange"\n                    />\n                    <sw-button @click="downloadLog">{{ $tc(\'infoplus.logs.download\') }}</sw-button>\n                </template>\n            </sw-card>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["infoplusLogApiService"],props:{file:{type:String,required:!0}},data(){return{lines:[],isLoading:!0,error:null,pagination:{page:1,limit:50},totalLines:0}},created(){this.loadLogContent()},methods:{async loadLogContent(){this.isLoading=!0,this.error=null;try{let e=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},t={Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`,"sw-context-token":Shopware.Context.api.contextToken,...e},i=`/api/_action/infoplus/logs/${encodeURIComponent(this.file)}/content?page=${this.pagination.page}&limit=${this.pagination.limit}`,s={method:"GET",headers:t,Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},o=await fetch(i,s);if(!o.ok)throw Error(`Failed to load log content: ${o.status} ${o.statusText}`);let n=await o.json();this.lines=n.lines||[],this.totalLines=n.total||0}catch(e){this.error=this.$tc("infoplus.logs.errors.failedToLoadLog",0,{details:e.message})||this.$tc("infoplus.logs.errors.failedToLoadLogGeneric")}finally{this.isLoading=!1}},onPageChange(e){this.pagination.page=e.page,this.pagination.limit=e.limit,this.loadLogContent()},lineIndex(e){return`${this.pagination.page}-${e}`},async downloadLog(){try{let e=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},t=`/api/_action/infoplus/logs/${encodeURIComponent(this.file)}/download`,i=await fetch(t,{method:"GET",headers:e});if(!i.ok)throw Error("Download failed: "+i.statusText);let s=await i.blob(),o=document.createElement("a");o.href=window.URL.createObjectURL(s),o.download=this.file,o.click(),window.URL.revokeObjectURL(o.href)}catch(e){this.error=this.$tc("infoplus.logs.errors.downloadFailed",0,{message:e.message})}}}});let{Component:f,Mixin:g}=Shopware;f.register("infoplus-new-customfield",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-new-customfield">\n                <sw-card :title="$tc(\'infoplus.customfield.createNew\')">\n                    <sw-text-field\n                            :label="$tc(\'infoplus.customfield.columns.technicalName\')"\n                            v-model:value="customField.technicalName"\n                            :required="true"/>\n                    <sw-text-field\n                            :label="$tc(\'infoplus.customfield.columns.label\')"\n                            v-model:value="customField.label"\n                            :required="true"/>\n                    <sw-select-field\n                            :label="$tc(\'infoplus.customfield.columns.type\')"\n                            v-model:value="customField.type"\n                            :options="typeOptions">\n                        <option\n                                v-for="typeOption in typeOptions"\n                                :key="typeOption.value"\n                                :value="typeOption.value"\n                        >\n                            {{ typeOption.label }}\n                        </option>\n                    </sw-select-field>\n                    <template v-if="customField.type === \'select\'">\n                        <sw-textarea-field\n                            :label="$tc(\'infoplus.customfield.columns.options\')"\n                            v-model:value="customField.optionsString"\n                            :placeholder="$tc(\'infoplus.customfield.optionsPlaceholder\')"\n                        />\n                    </template>\n                    <sw-switch-field\n                            :label="$tc(\'infoplus.customfield.columns.isRequired\')"\n                            v-model:value="customField.isRequired"/>\n                    <sw-number-field\n                        :label="$tc(\'infoplus.customfield.columns.position\')"\n                        v-model:value="customField.position"\n                        :required="false"\n                    />\n                    <sw-switch-field\n                        :label="$tc(\'infoplus.customfield.columns.active\')"\n                        v-model:value="customField.active"\n                    />\n                    <sw-switch-field\n                        :label="$tc(\'infoplus.customfield.columns.showInStorefront\')"\n                        v-model:value="customField.showInStorefront"/>\n                    <sw-button variant="primary" @click="saveCustomField">\n                        {{ $tc(\'infoplus.customfield.save\') }}\n                    </sw-button>\n                    <sw-button\n                            variant="ghost"\n                            :disabled="isLoading"\n                            @click="$router.back()"\n                    >\n                        {{ $tc(\'infoplus.category.cancel\') }}\n                    </sw-button>\n                </sw-card>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',mixins:[g.getByName("notification")],data(){return{customField:{technicalName:"",label:"",type:"text",isRequired:!1,optionsString:"",position:0,showInStorefront:!1,active:!0},isLoading:!1,typeOptions:[{value:"text",label:"Text"},{value:"textarea",label:"Textarea"},{value:"number",label:"Number"},{value:"money",label:"Money"},{value:"boolean",label:"Boolean"},{value:"select",label:"Select"}]}},methods:{async saveCustomField(){this.isLoading=!0;try{if(!this.customField.technicalName.trim()){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:"Technical name is required"});return}if(!this.customField.label.trim()){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:"Label is required"});return}"select"===this.customField.type?this.customField.options=this.customField.optionsString.split(",").map(e=>e.trim()).filter(Boolean):this.customField.options=[];let e={...this.customField};if(delete e.optionsString,!(await fetch("/api/_action/infoplus/customfields",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify(e)})).ok)throw Error("Failed to create custom field");this.createNotificationSuccess({title:this.$tc("infoplus.customfield.save"),message:this.$tc("infoplus.customfield.saved")}),this.$router.push({name:"infoplus.settings.index.customfields"})}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}finally{this.isLoading=!1}}}});let{Component:y,Mixin:w}=Shopware;y.register("infoplus-edit-customfield",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-edit-customfield">\n                <sw-card :title="$tc(\'infoplus.customfield.edit\')">\n                    <sw-text-field\n                            :label="$tc(\'infoplus.customfield.columns.technicalName\')"\n                            v-model:value="customField.technicalName"\n                            :required="true"/>\n                    <sw-text-field\n                            :label="$tc(\'infoplus.customfield.columns.label\')"\n                            v-model:value="customField.label"\n                            :required="true"/>\n                    <sw-select-field\n                            :label="$tc(\'infoplus.customfield.columns.type\')"\n                            v-model:value="customField.type"\n                            :options="typeOptions">\n                        <option\n                                v-for="typeOption in typeOptions"\n                                :key="typeOption.value"\n                                :value="typeOption.value"\n                        >\n                            {{ typeOption.label }}\n                        </option>\n                    </sw-select-field>\n                    <template v-if="customField.type === \'select\'">\n                        <sw-textarea-field\n                                :label="$tc(\'infoplus.customfield.columns.options\')"\n                                v-model:value="customField.optionsString"\n                                :placeholder="$tc(\'infoplus.customfield.optionsPlaceholder\')"\n                        />\n                    </template>\n                    <sw-switch-field\n                            :label="$tc(\'infoplus.customfield.columns.isRequired\')"\n                            v-model:value="customField.isRequired"/>\n                    <sw-number-field\n                        :label="$tc(\'infoplus.customfield.columns.position\')"\n                        v-model:value="customField.position"\n                        :required="false"\n                    />\n                    <sw-switch-field\n                        :label="$tc(\'infoplus.customfield.columns.active\')"\n                        v-model:value="customField.active"\n                    />\n                    <sw-switch-field\n                        :label="$tc(\'infoplus.customfield.columns.showInStorefront\')"\n                        v-model:value="customField.showInStorefront"\n                    />\n                    <sw-button variant="primary" @click="saveCustomField">\n                        {{ $tc(\'infoplus.customfield.save\') }}\n                    </sw-button>\n                    <sw-button\n                            variant="ghost"\n                            :disabled="isLoading"\n                            @click="$router.back()"\n                    >\n                        {{ $tc(\'infoplus.category.cancel\') }}\n                    </sw-button>\n                </sw-card>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',mixins:[w.getByName("notification")],data(){return{customField:{technicalName:"",label:"",type:"text",isRequired:!1,optionsString:"",position:0,showInStorefront:!1,active:!0},isLoading:!1,typeOptions:[{value:"text",label:"Text"},{value:"textarea",label:"Textarea"},{value:"number",label:"Number"},{value:"money",label:"Money"},{value:"boolean",label:"Boolean"},{value:"select",label:"Select"}]}},created(){this.loadCustomField()},methods:{async loadCustomField(){this.isLoading=!0;try{let e=await fetch(`/api/_action/infoplus/customfields/${this.$route.params.id}`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to load custom field");let t=await e.json();this.customField={technicalName:t.technicalName||"",label:t.label||"",type:t.type||"text",isRequired:t.isRequired||!1,optionsString:Array.isArray(t.options)?t.options.join(", "):"",position:"number"==typeof t.position?t.position:0,showInStorefront:t.showInStorefront||!1,active:"boolean"!=typeof t.active||t.active}}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}finally{this.isLoading=!1}},async saveCustomField(){this.isLoading=!0;try{if(!this.customField.technicalName.trim()){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:"Technical name is required"});return}if(!this.customField.label.trim()){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:"Label is required"});return}"select"===this.customField.type?this.customField.options=this.customField.optionsString.split(",").map(e=>e.trim()).filter(Boolean):this.customField.options=[];let e={...this.customField};if(delete e.optionsString,!(await fetch(`/api/_action/infoplus/customfields/${this.$route.params.id}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify(e)})).ok)throw Error("Failed to update custom field");this.createNotificationSuccess({title:this.$tc("infoplus.customfield.save"),message:this.$tc("infoplus.customfield.saved")}),this.$router.push({name:"infoplus.settings.index.customfields"})}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}finally{this.isLoading=!1}}}});let{Criteria:v}=Shopware.Data;Shopware.Component.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n    <sw-card\n            :title="$tc(\'infoplus.common.detailsCardTitle\')"\n            position-identifier="infoplus-details"\n    >\n        <template>\n            <div>\n                <span class="infoplus_message"> {{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncOrder"\n                >\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n        </template>\n\n    </sw-card>\n\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1,infoPollInterval:null}},created(){this.loadIInfoplusInformation(),this.infoPollInterval=setInterval(()=>{this.loadIInfoplusInformation()},3e4)},beforeDestroy(){this.infoPollInterval&&clearInterval(this.infoPollInterval)},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},loadIInfoplusInformation(){let e=this.$route.params.id||this.order?.id,t=this.repositoryFactory.create("infoplus_order_sync"),i=new v;i.addFilter(v.equals("shopwareOrderId",e)),t.search(i,Shopware.Context.api).then(e=>{if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.syncDate),this.message=`${this.$tc("infoplus.order.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.order.errors.failedToGetData")} ${e.message}`})})},async syncOrder(){let e=this.$route.params.id||this.order?.id;if(!(this.order?.transactions||[]).some(e=>e.stateMachineState?.technicalName==="paid")){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.order.errors.paymentNotPaid")});return}if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.order.errors.missingId")});return}this.message=this.$tc("infoplus.order.syncing"),this.isInProgress=!0,fetch(`/api/_action/infoplus/sync/order/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw this.isInProgress=!1,Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{e&&e.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.order.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):e&&e.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(e.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.order.errors.failedToRetrieveInfo")})}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.order.errors.failedToSync")} ${e.message}`})}).finally(()=>{this.isInProgress=!1})}}});let{Criteria:C}=Shopware.Data;Shopware.Component.override("sw-product-detail-base",{template:'{% block sw_product_detail_base_basic_info_card %}\n    <sw-card\n            :title="$tc(\'infoplus.common.detailsCardTitle\')"\n            position-identifier="infoplus-details"\n    >\n        <template>\n            <div>\n                <span class="infoplus_message">{{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncProduct"\n                >\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n            <hr style="margin: 40px -20px; border: 1px solid #e0e0e0;">\n            <div>\n                <sw-entity-single-select\n                        entity="infoplus_category"\n                        v-model:value="selectedCategory"\n                        @update:value="onCategoryChange"\n                        required\n                        :label="$tc(\'infoplus.product.selectCategoryLabel\')"\n                        :placeholder="$tc(\'infoplus.product.selectCategoryPlaceholder\')"\n                        :criteria="categoryCriteria"\n                >\n                </sw-entity-single-select>\n                <sw-entity-single-select\n                        entity="infoplus_category"\n                        v-model:value="selectedSubCategory"\n                        @update:value="onSubCategoryChange"\n                        required\n                        :label="$tc(\'infoplus.product.selectSubCategoryLabel\')"\n                        :placeholder="$tc(\'infoplus.product.selectSubCategoryPlaceholder\')"\n                        :criteria="subCategoryCriteria"\n                >\n                </sw-entity-single-select>\n                <hr style="margin: 40px -20px; border: 1px solid #e0e0e0;">\n                <div v-if="infoplusCustomFields.length">\n                    <h3>{{ $tc(\'infoplus.product.customFieldsTitle\') }}</h3>\n                    <div v-for="field in infoplusCustomFields" :key="field.technical_name" style="margin-bottom: 10px;">\n                        <template>\n                            <sw-switch-field\n                                    :label="field.label"\n                                    v-model:value="product.customFields[\'infoplus_\' + field.technical_name]"\n                            />\n                        </template>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </sw-card>\n\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1,selectedCategory:null,selectedSubCategory:null,selectedCategoryInternalId:null,selectedSubCategoryInternalId:null,infoplusCustomFields:[],expandedFields:{},cachedFieldValues:{},fieldsVisibilityInitialized:!1,initialInfoplusKeys:new Set}},async created(){await this.loadProduct(),await this.loadInfoplusCustomFields(),this.tryInitFieldVisibility(),this.loadInfoplusInformation()},computed:{categoryCriteria(){let e=new C;return e.addFilter(C.equals("isSubCategory",0)),e.setLimit(50),e},subCategoryCriteria(){let e=new C;return e.addFilter(C.equals("isSubCategory",1)),e.setLimit(50),e}},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},async loadProduct(){let e=this.$route.params.id||this.product?.id;if(!e){console.error("Product ID not found");return}let t=this.repositoryFactory.create("product"),i=new C;i.addFilter(C.equals("id",e));try{this.product=await t.get(e,Shopware.Context.api,i),this.product.customFields=this.product.customFields||{};let s=Object.keys(this.product.customFields||{}).filter(e=>e.startsWith("infoplus_"));this.initialInfoplusKeys=new Set(s),await this.loadCustomFields()}catch(e){console.error("Load Product Error:",e),this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.product.errors.failedToLoad")} ${e.message}`})}},async loadInfoplusInformation(){let e=this.$route.params.id||this.product?.id;if(!e){console.error("Product ID not found for Infoplus information");return}let t=this.repositoryFactory.create("infoplus_id_mapping"),i=new C;i.addFilter(C.equals("entityType","item")),i.addFilter(C.equals("shopwareId",e));try{let e=await t.search(i,Shopware.Context.api);if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.updatedAt||t.createdAt),this.message=`${this.$tc("infoplus.product.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}catch(e){console.error("Infoplus Information Error:",e),this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.product.errors.failedToGetData")} ${e.message}`})}},async loadCustomFields(){if(!this.product?.customFields){this.selectedCategory=null,this.selectedSubCategory=null,this.selectedCategoryInternalId=null,this.selectedSubCategoryInternalId=null,console.warn("No product_infoplus_data custom fields found");return}let e=this.repositoryFactory.create("infoplus_category"),t=this.product.customFields.infoplus_major_group_id,i=this.product.customFields.infoplus_sub_group_id;if(t){let i=new C;i.addFilter(C.equals("internalId",t));try{let t=await e.search(i,Shopware.Context.api);t&&t.length>0?(this.selectedCategory=t[0].id,this.selectedCategoryInternalId=t[0].internalId):(this.selectedCategory=null,this.selectedCategoryInternalId=null)}catch(e){console.error("Load Category Error:",e)}}else this.selectedCategory=null,this.selectedCategoryInternalId=null;if(i){let t=new C;t.addFilter(C.equals("internalId",i));try{let i=await e.search(t,Shopware.Context.api);i&&i.length>0?(this.selectedSubCategory=i[0].id,this.selectedSubCategoryInternalId=i[0].internalId):(this.selectedSubCategory=null,this.selectedSubCategoryInternalId=null)}catch(e){console.error("Load SubCategory Error:",e)}}else this.selectedSubCategory=null,this.selectedSubCategoryInternalId=null},async loadInfoplusCustomFields(){try{let e=await fetch("/api/_action/infoplus/customfields",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to load custom fields");let t=await e.json();this.infoplusCustomFields=t.map(e=>{let t=e.options||[];if("select"===e.type){if("string"==typeof t)try{let e=JSON.parse(t);t=Array.isArray(e)?e:[]}catch{t=t.split(",").map(e=>e.trim()).filter(Boolean)}t=Array.isArray(t)&&t.length>0&&"object"==typeof t[0]?t.map(e=>{let t=null!=e.value?e.value:null!=e.id?e.id:String(e),i=null!=e.label?e.label:null!=e.name?e.name:String(e);return{value:t,label:i,name:i}}):Array.isArray(t)?t.map(e=>{let t=String(e);return{value:t,label:t,name:t}}):[];let e=new Set;t=t.filter(t=>{let i=`${t.value}`;return!e.has(i)&&(e.add(i),!0)})}return{technical_name:e.technicalName,label:e.label,type:e.type,is_required:e.isRequired,options:t}})}catch(e){this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:e.message})}},tryInitFieldVisibility(){if(this.fieldsVisibilityInitialized||!this.product||!Array.isArray(this.infoplusCustomFields)||0===this.infoplusCustomFields.length)return;let e={};this.infoplusCustomFields.forEach(t=>{let i="infoplus_"+t.technical_name;null===(this.product.customFields?this.product.customFields[i]:void 0)&&this.product&&this.product.customFields&&this.$delete(this.product.customFields,i);let s=this.product.customFields?this.product.customFields[i]:void 0,o=null!=s&&("boolean"==typeof s||"number"==typeof s&&!Number.isNaN(s)||"string"==typeof s&&s.trim().length>0);e[t.technical_name]=o}),this.expandedFields=e,this.fieldsVisibilityInitialized=!0},toggleField(e){let t=!!this.expandedFields[e];this.$set(this.expandedFields,e,!t);let i="infoplus_"+e;if(t){let t=this.product?.customFields?this.product.customFields[i]:void 0;void 0!==t&&this.$set(this.cachedFieldValues,e,t);let s=null!=t&&("boolean"==typeof t||"number"==typeof t&&!Number.isNaN(t)||"string"==typeof t&&t.trim().length>0);this.initialInfoplusKeys&&this.initialInfoplusKeys.has(i)||s?this.product&&this.product.customFields&&this.$set(this.product.customFields,i,null):this.product&&this.product.customFields&&Object.prototype.hasOwnProperty.call(this.product.customFields,i)&&this.$delete(this.product.customFields,i)}else if(Object.prototype.hasOwnProperty.call(this.cachedFieldValues,e)){let t=this.cachedFieldValues[e];this.product&&this.product.customFields&&this.$set(this.product.customFields,i,t)}else this.product&&this.product.customFields&&null===this.product.customFields[i]&&this.$delete(this.product.customFields,i)},async onCategoryChange(e){if(this.selectedCategory=e,!this.product){console.error("Product not loaded");return}if(this.product.customFields||(this.product.customFields={}),e)try{let t=this.repositoryFactory.create("infoplus_category"),i=await t.get(e,Shopware.Context.api);this.selectedCategoryInternalId=i?i.internalId:null}catch(e){console.error("Failed to load selected category",e),this.selectedCategoryInternalId=null}else this.selectedCategoryInternalId=null;this.product.customFields.infoplus_major_group_id=this.selectedCategoryInternalId},async onSubCategoryChange(e){if(this.selectedSubCategory=e,!this.product){console.error("Product not loaded");return}if(this.product.customFields||(this.product.customFields={}),e)try{let t=this.repositoryFactory.create("infoplus_category"),i=await t.get(e,Shopware.Context.api);this.selectedSubCategoryInternalId=i?i.internalId:null}catch(e){console.error("Failed to load selected subcategory",e),this.selectedSubCategoryInternalId=null}else this.selectedSubCategoryInternalId=null;this.product.customFields.infoplus_sub_group_id=this.selectedSubCategoryInternalId},async syncProduct(){let e=this.$route.params.id||this.product?.id;if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.product.errors.missingId")});return}if(!this.product.customFields?.infoplus_major_group_id||!this.product.customFields?.infoplus_sub_group_id){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.product.errors.categoryRequired")});return}this.message=this.$tc("infoplus.product.syncing"),this.isInProgress=!0;try{let t=await fetch(`/api/_action/infoplus/sync/product/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!t.ok)throw Error(`HTTP error! status: ${t.status}`);let i=await t.json();i&&i.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.product.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):i&&i.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(i.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.product.errors.failedToRetrieveInfo")})}catch(e){console.error("Sync Product Error:",e),this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.product.errors.failedToSync")} ${e.message}`})}finally{this.isInProgress=!1}}}});let{Criteria:b}=Shopware.Data;Shopware.Component.override("sw-customer-detail-base",{template:'{% block sw_customer_detail_base_info_holder %}\n    <sw-card :title="$tc(\'infoplus.common.detailsCardTitle\')" position-identifier="infoplus-details">\n        <template>\n            <div>\n                <span class="infoplus_message"> {{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncCustomer">\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n        </template>\n    </sw-card>\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1}},created(){this.loadIInfoplusInformation()},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},loadIInfoplusInformation(){let e=this.$route.params.id||this.customer?.id,t=this.repositoryFactory.create("infoplus_id_mapping"),i=new b;i.addFilter(b.equals("entityType","customer")),i.addFilter(b.equals("shopwareId",e)),t.search(i,Shopware.Context.api).then(e=>{if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.updatedAt||t.createdAt),this.message=`${this.$tc("infoplus.customer.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.customer.errors.failedToGetData")} ${e.message}`})})},async syncCustomer(){let e=this.$route.params.id||this.customer?.id;if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.customer.errors.missingId")});return}this.isInProgress=!0,this.message=this.$tc("infoplus.customer.syncing"),fetch(`/api/_action/infoplus/sync/customer/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw this.isInProgress=!1,Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{e&&e.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.customer.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):e&&e.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(e.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.customer.errors.failedToRetrieveInfo")})}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.customer.errors.failedToSync")} ${e.message}`})}).finally(()=>{this.isInProgress=!1})}}}),i(214);let{Component:$,Mixin:S}=Shopware;$.register("infoplus-settings",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <sw-tabs\n                    :active-item="activeTab"\n                    class="infoplus-content"\n                    position-identifier="infoplus-settings"\n                    :small="false">\n\n                <sw-tabs-item name="sync-settings"\n                              @click.native="activeTab = \'sync-settings\'"\n                              :is-active="activeTab === \'sync-settings\'"\n                              :route="{ name: \'infoplus.settings.index.sync\' }">\n                    {{ $tc(\'infoplus.settings.syncSettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="category-settings"\n                              :route="{ name: \'infoplus.settings.index.categories\', params: { isSubCategory: false } }">\n                    {{ $tc(\'infoplus.settings.categorySettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="sub-category-settings"\n                              :route="{ name: \'infoplus.settings.index.subCategories\', params: { isSubCategory: true } }">\n                    {{ $tc(\'infoplus.settings.subCategorySettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="customfield-settings"\n                              :route="{ name: \'infoplus.settings.index.customfields\' }">\n                    {{ $tc(\'infoplus.settings.customFieldSettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="error-log-settings"\n                              :route="{ name: \'infoplus.settings.index.logs\' }">\n                    {{ $tc(\'infoplus.settings.logInfo\') }}\n                </sw-tabs-item>\n\n            </sw-tabs>\n            <router-view></router-view>\n        </sw-card-view>\n    </template>\n</sw-page>',mixins:[S.getByName("notification")],data(){return{isLoading:!1,activeTab:"sync-settings"}}});let{Module:F}=Shopware;F.register("infoplus-settings",{type:"plugin",name:"infoplus-settings",title:"infoplus.settings.title",description:"infoplus.settings.description",color:"#000000",icon:"regular-cog",routes:{index:{component:"infoplus-settings",path:"index",children:{sync:{component:"infoplus-sync-settings",path:"sync"},categories:{component:"infoplus-categories",path:"categories",parameters:{isSubCategory:!1}},subCategories:{component:"infoplus-categories",path:"subCategories",parameters:{isSubCategory:!0}},logs:{component:"log-viewer",path:"logs"},customfields:{component:"infoplus-customfields",path:"customfields"}}},addCategory:{component:"infoplus-new-category",path:"addCategory/:isSubCategory"},editCategory:{component:"infoplus-edit-category",path:"editCategory/:isSubCategory/:id"},logDetail:{component:"infoplus-log-detail",path:"logDetail/:file",props:{default:!0}},addCustomField:{component:"infoplus-new-customfield",path:"addCustomField"},editCustomField:{component:"infoplus-edit-customfield",path:"editCustomField/:id"}},settingsItem:{group:"system",to:"infoplus.settings.index.sync",icon:"regular-cog"}});let{ApiService:I}=Shopware.Classes;class T extends I{constructor(e,t){super(e,t,"infoplus"),this.name="infoplusLogApiService"}getLogs(){let e=this.getBasicHeaders();return this.httpClient.get("_action/infoplus/logs",{headers:e}).then(I.handleResponse)}getLog(e){let t=this.getBasicHeaders();return this.httpClient.get(`/_action/infoplus/logs/${encodeURIComponent(e)}`,{headers:t}).then(I.handleResponse)}}i(805);let{Criteria:x}=Shopware.Data;Shopware.Component.register("sw-order-detail-customfields",{template:'<sw-card title="Infoplus Custom Fields">\n    <div v-if="mappedLineItems.length" class="infoplus-customfields-wrapper">\n        <div v-for="item in mappedLineItems" :key="item.id" class="infoplus-lineitem-fields">\n            <h4>{{ item.label || item.name }}</h4>\n            <ul v-if="item.displayCustomFields.length" class="infoplus-customfields-list">\n                <li v-for="field in item.displayCustomFields" :key="field.label">\n                    <strong class="infoplus-customfields-label">{{ field.label }}:</strong>\n                    <span class="infoplus-customfields-value">{{ field.value }}</span>\n                </li>\n            </ul>\n            <em v-else class="infoplus-customfields-empty">No custom fields</em>\n        </div>\n    </div>\n    <em v-else class="infoplus-customfields-empty">No line items found</em>\n</sw-card>\n',inject:["repositoryFactory"],data(){return{order:null,lineItems:[],infoplusCustomFields:[]}},metaInfo(){return{title:"Custom Fields",meta:[{name:"description",content:"Custom Fields"}]}},created(){this.loadOrder(),this.loadInfoplusCustomFields()},computed:{mappedLineItems(){return this.lineItems.map(e=>{let t=Object.entries(e.payload&&e.payload.infoplus_customfields?e.payload.infoplus_customfields:{}).map(([e,t])=>{let i=e.startsWith("infoplus_")?e.replace("infoplus_",""):e,s=this.infoplusCustomFields.find(e=>e.technicalName===i);return{label:s?s.label:i,value:t}});return{...e,displayCustomFields:t}})}},methods:{loadOrder(){let e=this.$route.params.id,t=this.repositoryFactory.create("order"),i=new x;i.addAssociation("lineItems"),i.addFilter(x.equals("id",e)),t.search(i,Shopware.Context.api).then(e=>{e&&e.length>0?(this.order=e[0],this.lineItems=this.order.lineItems||[]):(this.order=null,this.lineItems=[])}).catch(e=>{this.createNotificationError({title:"Order fetch error",message:e.message})})},loadInfoplusCustomFields(){let e=this.repositoryFactory.create("infoplus_field_definition"),t=new x;e.search(t,Shopware.Context.api).then(e=>{this.infoplusCustomFields=e||[]}).catch(e=>{this.createNotificationError({title:"Custom field fetch error",message:e.message})})}}}),i(703);let{Criteria:L}=Shopware.Data,{State:N,Mixin:_}=Shopware;Shopware.Component.register("sw-order-create-customfields",{template:'<sw-card title="Infoplus Custom Fields">\n    <div v-if="lineItems && lineItems.length">\n        <div v-for="item in lineItems || []" :key="item.id" class="infoplus-lineitem-fields">\n            <h4>{{ item.label || item.name }}</h4>\n            <div v-if="assignableFieldsByLineItem[item.id] && assignableFieldsByLineItem[item.id].length">\n                <div v-for="field in assignableFieldsByLineItem[item.id]" :key="field.technicalName" class="infoplus-customfield">\n\n                    <template v-if="field.type === \'text\'">\n                        <sw-text-field\n                            :label="field.label"\n                            :required="field.isRequired"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                        />\n                    </template>\n\n                    <template v-else-if="field.type === \'textarea\'">\n                        <sw-textarea-field\n                            :label="field.label"\n                            :required="field.isRequired"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                            :rows="3"\n                        />\n                    </template>\n\n                    <template v-else-if="field.type === \'number\' || field.type === \'money\'">\n                        <sw-number-field\n                            :label="field.label"\n                            :required="field.isRequired"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                            :digits="field.type === \'money\' ? 2 : 0"\n                        />\n                    </template>\n\n                    <template v-else-if="field.type === \'boolean\'">\n                        <sw-switch-field\n                            :label="field.label"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                        />\n                    </template>\n\n                    <template v-else-if="field.type === \'select\'">\n                        <sw-single-select\n                            :label="field.label"\n                            :required="field.isRequired"\n                            :options="(field.options || []).map(o => ({ label: o, value: o }))"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                            placeholder="Select..."\n                        />\n                    </template>\n\n                    <template v-else>\n                        <sw-text-field\n                            :label="field.label"\n                            :required="field.isRequired"\n                            v-model:value="item.payload.customFields[\'infoplus_\' + field.technicalName]"\n                            @update:value="updateCustomField(item, \'infoplus_\' + field.technicalName, $event)"\n                        />\n                    </template>\n                </div>\n            </div>\n            <em v-else class="infoplus-customfields-empty">No assignable custom fields for this product</em>\n        </div>\n        <div style="margin-top: 2rem; text-align: right;">\n            <sw-button variant="primary" @click="saveCustomFields">{{ $tc(\'global.default.save\') }}</sw-button>\n        </div>\n    </div>\n    <em v-else>No line items found</em>\n</sw-card>\n',inject:["repositoryFactory"],mixins:[_.getByName("notification")],data(){return{infoplusCustomFields:[],lineItems:[]}},computed:{assignableFieldsByLineItem(){let e={};return this.lineItems.forEach(t=>{let i=t.payload&&t.payload.product,s=i&&i.customFields?i.customFields:{};e[t.id]=this.infoplusCustomFields.filter(e=>!0===s["infoplus_"+e.technicalName])}),e},cart(){return N.get("swOrder").cart},customer(){return N.get("swOrder").customer},salesChannelId(){return this.customer?.salesChannelId||this.salesChannelContext&&this.salesChannelContext.salesChannelId||""},contextToken(){return this.cart?.token||this.salesChannelContext&&this.salesChannelContext.token||""}},watch:{contextToken(e,t){e&&e!==t&&(this.cleanupInfoplusLocalStorage(),this.restoreLineItemCustomFieldsFromLocalStorage())}},async created(){this.loadLineItems(),this.loadInfoplusCustomFields(),this.loadProductsForLineItems(),this.cleanupInfoplusLocalStorage(),this.restoreLineItemCustomFieldsFromLocalStorage()},methods:{loadLineItems(){let e=N.get("swOrder").cart;this.lineItems=e&&e.lineItems?e.lineItems:[]},loadInfoplusCustomFields(){let e=this.repositoryFactory.create("infoplus_field_definition"),t=new L;e.search(t,Shopware.Context.api).then(e=>{this.infoplusCustomFields=e||[]}).catch(e=>{this.createNotificationError({title:"Custom field fetch error",message:e.message})})},loadProductsForLineItems(){let e=this.repositoryFactory.create("product"),t=this.lineItems.map(e=>e.id).filter(e=>!!e);if(!t.length)return;let i=new L;i.addFilter(L.equalsAny("id",t));try{e.search(i,Shopware.Context.api).then(e=>{this.lineItems.forEach(t=>{let i=t.id;i&&e.get(i)&&this.$set(t.payload,"product",e.get(i))})})}catch(e){this.createNotificationError({title:"Product fetch error",message:e.message})}},getLocalStorageKey(){return this.contextToken?`infoplus_lineitems_${this.contextToken}`:null},cleanupInfoplusLocalStorage(){try{let e=this.getLocalStorageKey(),t=Date.now();for(let i=localStorage.length-1;i>=0;i--){let s=localStorage.key(i);if(s&&s.startsWith("infoplus_lineitems_")){if(s===e){let e=localStorage.getItem(s);if(e)try{let i=JSON.parse(e);i.savedAt&&t-i.savedAt>36e5&&localStorage.removeItem(s)}catch(e){localStorage.removeItem(s)}continue}localStorage.removeItem(s)}}}catch(e){console.warn("Infoplus localStorage cleanup failed",e)}},persistLineItemsToLocalStorage(){this.cleanupInfoplusLocalStorage();let e=this.getLocalStorageKey();if(e)try{let t=this.lineItems.map(e=>{let t={},i=e.customFields||{};return Object.keys(i).forEach(e=>{e.startsWith("infoplus_")&&(t[e]=i[e])}),{id:e.id,customFields:t}}),i={token:this.contextToken,savedAt:Date.now(),items:t};window.localStorage.setItem(e,JSON.stringify(i))}catch(e){console.warn("Infoplus localStorage persist failed",e)}},restoreLineItemCustomFieldsFromLocalStorage(){let e=this.getLocalStorageKey();if(e)try{let t=window.localStorage.getItem(e);if(!t)return;let i=JSON.parse(t);if(!i||i.token!==this.contextToken)return;if(Date.now()-i.savedAt>36e5){window.localStorage.removeItem(e);return}let s={};(i.items||[]).forEach(e=>{s[e.id]=e.customFields||{}}),this.lineItems.forEach(e=>{let t=s[e.id];t&&(e.customFields||this.$set(e,"customFields",{}),e.payload||this.$set(e,"payload",{}),e.payload.customFields||this.$set(e.payload,"customFields",{}),Object.keys(t).forEach(i=>{this.$set(e.customFields,i,t[i]),this.$set(e.payload.customFields,i,t[i])}))})}catch(e){console.warn("Infoplus localStorage restore failed",e)}},updateCustomField(e,t,i){e.customFields||this.$set(e,"customFields",{}),e.payload||this.$set(e,"payload",{}),e.payload.customFields||this.$set(e.payload,"customFields",{}),this.$set(e.customFields,t,i),this.$set(e.payload.customFields,t,i)},async pushInfoplusToCartPayload(){let e=this.salesChannelId,t=this.contextToken;if(!e||!t)return;let i=Shopware.Service("cartStoreService"),s=`_proxy/store-api/${e}/infoplus/cart/line-item/custom-fields`,o={...i.getBasicHeaders(),"sw-context-token":t},n=this.lineItems.map(e=>{let t={id:e.id,customFields:{}},i=e.payload?.customFields||e.customFields||{};return Object.keys(i).forEach(e=>{e.startsWith("infoplus_")&&(t.customFields[e]=i[e])}),e.payload||this.$set(e,"payload",{}),this.$set(e.payload,"infoplus_customfields",t.customFields),t}).filter(e=>Object.keys(e.customFields).length>0);n.length&&await i.httpClient.post(s,{items:n},{headers:o})},async saveCustomFields(){let e=!0,t=this.salesChannelId,i=this.cart?.token;if(!t||"string"!=typeof t||32!==t.length){this.createNotificationError({title:"Sales Channel Error",message:"Sales Channel ID is missing or invalid."});return}if(!i||"string"!=typeof i){this.createNotificationError({title:"Cart Error",message:"Cart token is missing or invalid."});return}for(let t of this.lineItems){let i={};for(let s of(t.customFields&&Object.keys(t.customFields).forEach(e=>{e.startsWith("infoplus_")&&(i[e]=t.customFields[e])}),this.assignableFieldsByLineItem[t.id]||[]))!s.isRequired||s.type||i["infoplus_"+s.technicalName]||(e=!1);t.payload||this.$set(t,"payload",{}),t.payload.customFields||this.$set(t.payload,"customFields",{}),Object.assign(t.payload.customFields,i),t.customFields||this.$set(t,"customFields",{}),Object.assign(t.customFields,i)}if(!e){this.createNotificationError({title:"Validation Error",message:"Please fill all required custom fields."});return}try{for(let e of this.lineItems)await N.dispatch("swOrder/saveLineItem",{salesChannelId:t,contextToken:this.contextToken,item:e});await this.pushInfoplusToCartPayload(),this.persistLineItemsToLocalStorage(),this.createNotificationSuccess({title:"Success",message:"Custom fields saved successfully."})}catch(e){this.createNotificationError({title:"Save Error",message:e.message||"Failed to save custom fields."})}}}}),Shopware.Component.override("sw-settings-shipping-detail",{template:'{% block sw_settings_shipping_detail_base %}\n    <sw-card\n        position-identifier="infoplus-shipping-method"\n        :is-loading="isLoading || carriersLoading"\n        :title="$tc(\'infoplus.shipping.cardTitle\')"\n    >\n        <sw-single-select\n            v-model:value="selectedInfoplusCarrierId"\n            :disabled="!acl.can(\'shipping.editor\') || carriersLoading || undefined"\n            :options="carrierOptions"\n            :label="$tc(\'infoplus.shipping.carrierSelectLabel\')"\n            :placeholder="$tc(\'infoplus.shipping.carrierSelectPlaceholder\')"\n            show-clearable-button\n        >\n            <template #hint>\n                <span>{{ $tc(\'infoplus.shipping.helpDefaultCarrier\') }}</span>\n            </template>\n        </sw-single-select>\n    </sw-card>\n\n    {% parent %}\n{% endblock %}\n',data(){return{carriersLoading:!1,carrierOptions:[],selectedInfoplusCarrierId:null}},created(){this.ensureCustomFields(),this.initSelectedFromEntity(),this.loadCarriers()},watch:{selectedInfoplusCarrierId(e){this.shippingMethod&&(this.shippingMethod.customFields||this.$set(this.shippingMethod,"customFields",{}),null==e||""===e?this.$delete(this.shippingMethod.customFields,"infoplus_carrier_id"):this.$set(this.shippingMethod.customFields,"infoplus_carrier_id",e))},shippingMethod:{deep:!0,handler(){this.initSelectedFromEntity()}}},methods:{ensureCustomFields(){this.shippingMethod&&(this.shippingMethod.customFields||this.$set(this.shippingMethod,"customFields",{}))},initSelectedFromEntity(){if(!this.shippingMethod)return;let e=this.shippingMethod.customFields?this.shippingMethod.customFields.infoplus_carrier_id:null;this.selectedInfoplusCarrierId=e??null,null!=e&&this.carrierOptions.length>0&&!this.carrierOptions.some(t=>String(t.value)===String(e))&&this.carrierOptions.unshift({value:e,label:`${this.$tc("infoplus.shipping.unknownCarrierPrefix")} ${e}`})},async loadCarriers(){this.carriersLoading=!0;try{let e=await fetch("/api/_action/infoplus/carriers",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error(`Failed to load carriers (${e.status})`);let t=await e.json();this.carrierOptions=Array.isArray(t)?t.map(e=>({value:e.carrier,label:e.label})):[];let i=this.shippingMethod?.customFields?.infoplus_carrier_id;null==i||this.carrierOptions.some(e=>String(e.value)===String(i))||this.carrierOptions.unshift({value:i,label:`${this.$tc("infoplus.shipping.unknownCarrierPrefix")} ${i}`})}catch(e){console.warn("Failed to load InfoPlus carriers",e)}finally{this.carriersLoading=!1}}}}),Shopware.Component.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs_extension %}\n    {% parent %}\n    <sw-tabs-item\n\n            class="sw-order-detail__tabs-tab-returns"\n            :route="{ name: \'sw-order-detail-customfields\', params: { id: $route.params.id } }"\n            :title="$tc(\'infoplus.customfields\')"\n    >\n        Infoplus Custom Fields\n    </sw-tabs-item>\n{% endblock %}'}),Shopware.Component.override("sw-order-create",{template:'{% block sw_order_create_content_tabs_details %}\n    {% parent %}\n    <sw-tabs-item\n        class="sw-order-create__tab-customfields"\n        :route="{ name: \'sw-order-create-customfields\' }"\n        :title="$tc(\'infoplus.customfields\')"\n    >\n        Infoplus Custom Fields\n    </sw-tabs-item>\n{% endblock %}\n'}),Shopware.Application.addServiceProvider("infoplusLogApiService",e=>new T(Shopware.Application.getContainer("init").httpClient,e.loginService)),Shopware.Module.register("sw-order-detail-customfields",{routeMiddleware(e,t){let i="sw-order-detail-customfields";"sw.order.detail"===t.name&&t.children.every(e=>e.name!==i)&&t.children.push({name:i,path:"/sw/order/detail/:id/customfields",component:"sw-order-detail-customfields",meta:{parentPath:"sw.order.index"}}),e(t)}}),Shopware.Module.register("sw-order-create-customfields",{routeMiddleware(e,t){let i="sw-order-create-customfields";"sw.order.create"===t.name&&t.children.every(e=>e.name!==i)&&t.children.push({name:i,path:"/sw/order/create/customfields",component:"sw-order-create-customfields",meta:{parentPath:"sw.order.create"}}),e(t)}})}()}();