!function(){var e={384:function(){},878:function(){},461:function(e,t,i){var s=i(384);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("2904ac57",s,!0,{})},697:function(e,t,i){var s=i(878);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,i(534).A)("0ca63e04",s,!0,{})},534:function(e,t,i){"use strict";function s(e,t){for(var i=[],s={},n=0;n<t.length;n++){var o=t[n],a=o[0],r={id:e+":"+n,css:o[1],media:o[2],sourceMap:o[3]};s[a]?s[a].parts.push(r):i.push(s[a]={id:a,parts:[r]})}return i}i.d(t,{A:function(){return f}});var n,o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},r=o&&(document.head||document.getElementsByTagName("head")[0]),c=null,l=0,d=!1,u=function(){},p=null,h="data-vue-ssr-id",g="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,i,n){d=i,p=n||{};var o=s(e,t);return m(o),function(t){for(var i=[],n=0;n<o.length;n++){var r=a[o[n].id];r.refs--,i.push(r)}t?m(o=s(e,t)):o=[];for(var n=0;n<i.length;n++){var r=i[n];if(0===r.refs){for(var c=0;c<r.parts.length;c++)r.parts[c]();delete a[r.id]}}}}function m(e){for(var t=0;t<e.length;t++){var i=e[t],s=a[i.id];if(s){s.refs++;for(var n=0;n<s.parts.length;n++)s.parts[n](i.parts[n]);for(;n<i.parts.length;n++)s.parts.push(w(i.parts[n]));s.parts.length>i.parts.length&&(s.parts.length=i.parts.length)}else{for(var o=[],n=0;n<i.parts.length;n++)o.push(w(i.parts[n]));a[i.id]={id:i.id,refs:1,parts:o}}}}function y(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function w(e){var t,i,s=document.querySelector("style["+h+'~="'+e.id+'"]');if(s){if(d)return u;s.parentNode.removeChild(s)}if(g){var n=l++;t=$.bind(null,s=c||(c=y()),n,!1),i=$.bind(null,s,n,!0)}else t=S.bind(null,s=y()),i=function(){s.parentNode.removeChild(s)};return t(e),function(s){s?(s.css!==e.css||s.media!==e.media||s.sourceMap!==e.sourceMap)&&t(e=s):i()}}var C=(n=[],function(e,t){return n[e]=t,n.filter(Boolean).join("\n")});function $(e,t,i,s){var n=i?"":s.css;if(e.styleSheet)e.styleSheet.cssText=C(t,n);else{var o=document.createTextNode(n),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function S(e,t){var i=t.css,s=t.media,n=t.sourceMap;if(s&&e.setAttribute("media",s),p.ssrId&&e.setAttribute(h,t.id),n&&(i+="\n/*# sourceURL="+n.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={id:s,exports:{}};return e[s](o,o.exports,i),o.exports}i.d=function(e,t){for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/infopluscommerce/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/infopluscommerce/"),function(){"use strict";let{Component:e,Mixin:t}=Shopware;e.register("sync-button",{template:'<template>\n    <sw-button @click="triggerSync" id="infoplus-sync-btn" variant="primary">\n        {{ syncButtonText }}\n    </sw-button>\n    <span style="margin-left: 10px"> {{ lastSyncTime }} </span>\n</template>',inject:["notification"],mixins:[t.getByName("notification")],created(){this.fetchSyncStatus()},data(){return{lastSyncTime:"",syncButtonText:this.$tc("infoplus.sync.startSynchronization")}},methods:{fetchSyncStatus(){fetch("/api/_action/infoplus/config",{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>e.json()).then(e=>{let t=!!e.syncInProgress;if(this.syncButtonText=t?this.$tc("infoplus.sync.synchronizingInBackground"):this.$tc("infoplus.sync.startSynchronization"),e.lastSyncTime){let t=new Date(e.lastSyncTime);this.lastSyncTime=this.$tc("infoplus.sync.lastSuccessfulSync")+" "+t.toLocaleString("en-US",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}else this.lastSyncTime=t?"":this.$tc("infoplus.sync.neverSynchronized");let i=document.getElementById("infoplus-sync-btn");i&&(i.disabled=t)})},triggerSync(){fetch("/api/_action/infoplus/sync/all",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{let t=document.getElementById("infoplus-sync-btn");t&&(t.disabled=!0,t.textContent=this.$tc("infoplus.sync.synchronizingInBackground"),this.createNotificationSuccess({message:this.$tc("infoplus.sync.synchronizationStarted")}))}).catch(e=>{alert(this.$tc("infoplus.sync.synchronizationFailed")+e);let t=document.getElementById("infoplus-sync-btn");t&&(t.disabled=!1,t.textContent=this.$tc("infoplus.sync.startSynchronization"))})}}});let{Component:s,Mixin:n}=Shopware;s.register("infoplus-switch",{template:'<template>\n    <sw-switch-field\n            :label="label"\n            :name="name"\n            v-model="isChecked"\n            @update:value="handleClick"\n    />\n</template>',inject:["repositoryFactory","systemConfigApiService"],mixins:[n.getByName("notification")],props:{label:String,name:String},data(){return{isChecked:!1,inProgress:!1}},created(){this.loadConfig()},methods:{async loadConfig(){try{let e=(await this.systemConfigApiService.getValues("InfoPlusCommerce.config"))[this.name];this.isChecked=!!e}catch(e){console.error("Config load error:",e),this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configLoadFailed")})}},async saveConfig(e,t){try{await this.systemConfigApiService.saveValues({[e]:t}),this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:this.$tc("infoplus.notifications.success.configSaved")})}catch(e){console.error("Config save error:",e),this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configSaveFailed")})}},async handleClick(){if(this.inProgress)return;this.inProgress=!0;let e=document.getElementById(this.name);this.isChecked=e.checked;let t=document.getElementById("InfoPlusCommerce.config.syncProducts"),i=document.getElementById("InfoPlusCommerce.config.syncCategories"),s=document.getElementById("InfoPlusCommerce.config.syncOrders"),n=document.getElementById("InfoPlusCommerce.config.syncCustomers"),o=document.getElementById("InfoPlusCommerce.config.syncInventory");if(!t||!i||!s||!n||!o){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.configLoadFailed")}),this.inProgress=!1;return}let a=[];!s.checked||t.checked&&i.checked&&n.checked?o.checked&&!t.checked?(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementInventory")}),e.checked=!e.checked,this.isChecked=!this.isChecked):t.checked&&!i.checked?(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementProducts")}),e.checked=!e.checked,this.isChecked=!this.isChecked):a.push(this.saveConfig(this.name,this.isChecked)):(this.createNotificationInfo({title:this.$tc("infoplus.sync.syncRequirementNotice"),message:this.$tc("infoplus.notifications.info.syncRequirementOrders")}),e.checked=!e.checked,this.isChecked=!this.isChecked),await Promise.all(a).finally(()=>{this.inProgress=!1,this.$emit("input",this.isChecked)})}}});let{Component:o,Mixin:a}=Shopware;o.register("infoplus-categories",{template:'<template>\n    <div class="infoplus-categories">\n        <div class="infoplus-content" style="display: flex; justify-content: flex-end; margin-bottom: 20px;">\n            <sw-button\n                    variant="primary"\n                    @click="addNewCategory"\n            >\n                {{ $tc(\'infoplus.category.createNew\') }}\n            </sw-button>\n        </div>\n        <sw-card>\n            <sw-data-grid\n                    :dataSource="categories"\n                    :actions="true"\n                    :columns="[\n                    { property: \'internalId\', label: $tc(\'infoplus.category.columns.infoplusId\') },\n                    { property: \'name\', label: $tc(\'infoplus.category.columns.name\') }\n                    ]"\n                    :showSelection="false"\n            >\n                <template #actions="{ item }">\n\n                    <sw-context-menu-item @click="editCategory(item)">\n                        {{ $tc(\'infoplus.category.edit\') }}\n                    </sw-context-menu-item>\n                    <sw-context-menu-item @click="deleteCategory(item)">\n                        {{ $tc(\'infoplus.category.delete\') }}\n                    </sw-context-menu-item>\n                </template>\n            </sw-data-grid>\n        </sw-card>\n    </div>\n</template>',inject:["notification"],mixins:[a.getByName("notification")],props:{isLoading:Boolean},data(){return{categories:[],isSubCategory:!1}},created(){this.$route.path.includes("subCategories")?this.isSubCategory=!0:this.isSubCategory=!1,this.fetchCategories()},watch:{$route(e,t){e.path.includes("subCategories")?this.isSubCategory=!0:this.isSubCategory=!1,this.fetchCategories()}},methods:{async fetchCategories(){try{let e=await fetch(`/api/_action/infoplus/getAllCategories/${this.isSubCategory?"1":"0"}`,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to fetch categories");let t=await e.json();this.categories=t||[]}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.fetchCategoriesFailed",0,{message:e.message})})}},addNewCategory(){this.$router.push({name:"infoplus.settings.addCategory",params:{isSubCategory:this.isSubCategory}})},editCategory(e){this.$router.push({name:"infoplus.settings.editCategory",params:{isSubCategory:this.isSubCategory,id:e.id}})},async deleteCategory(e){if(confirm(this.$tc("infoplus.notifications.confirm.deleteCategory")))try{let t=await fetch(`/api/_action/infoplus/delete/category/${e.id}`,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!t.ok)throw Error("Failed to delete category");let i=await t.json();i.success?this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:i.message||this.$tc("infoplus.notifications.success.categoryDeleted")}):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:i.message||this.$tc("infoplus.notifications.error.deleteCategoryFailed",0,{message:""})}),await this.fetchCategories()}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.deleteCategoryFailed",0,{message:e.message})})}}}}),i(461),Shopware.Component.register("log-viewer",{template:'<template>\n    <sw-card title="InfoPlus Logs" :is-loading="isLoading">\n        <template v-if="error">\n            <sw-alert variant="error">{{ error }}</sw-alert>\n        </template>\n\n        <template v-else>\n            <div v-if="paginatedLogs.length">\n                <sw-data-grid\n                    :dataSource="paginatedLogs"\n                    :actions="true"\n                    :columns="columns"\n                    :showSelection="false"\n                    @click="onViewLog(item)"\n                >\n                    <template #actions="{ item }">\n                        <sw-context-menu-item @click="onViewLog(item)">\n                            {{ $tc(\'infoplus.logs.actions.view\') }}\n                        </sw-context-menu-item>\n                        <sw-context-menu-item @click="onDownloadLog(item)">\n                            {{ $tc(\'infoplus.logs.actions.download\') }}\n                        </sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n                <div>\n                    <sw-pagination\n                        :total="logs.length"\n                        :limit="pagination.limit"\n                        :page="pagination.page"\n                        @page-change="onPageChange"\n                    />\n                </div>\n            </div>\n            <p v-else>{{ $tc(\'infoplus.logs.noLogsAvailable\') }}</p>\n        </template>\n    </sw-card>\n</template>\n',inject:["infoplusLogApiService"],data(){return{logs:[],isLoading:!0,error:null,pagination:{page:1,limit:10},limitOptions:[{value:5,label:"5"},{value:10,label:"10"},{value:25,label:"25"},{value:50,label:"50"}],columns:[{property:"file",label:this.$tc("infoplus.logs.columns.file")}],rowActions:[{label:this.$tc("infoplus.logs.actions.view"),action:"view",icon:"default-eye"},{label:this.$tc("infoplus.logs.actions.download"),action:"download",icon:"default-arrow-down"}]}},computed:{paginatedLogs(){if(!this.logs||0===this.logs.length)return[];let e=(this.pagination.page-1)*this.pagination.limit;return this.logs.slice(e,e+this.pagination.limit)}},created(){this.loadData()},methods:{async loadData(){this.isLoading=!0,this.error=null;try{let e=await this.infoplusLogApiService.getLogs();this.logs=e.logs||[];let t=Math.max(1,Math.ceil(this.logs.length/this.pagination.limit));this.pagination.page>t&&(this.pagination.page=t)}catch(e){this.error=e?.response?.data?.errors?.[0]?.detail||this.$tc("infoplus.logs.errorLoadLogs")}finally{this.isLoading=!1}},onPageChange(e){this.pagination.page=e.page,this.pagination.limit=e.limit},onViewLog(e){this.$router.push({name:"infoplus.settings.logDetail",params:{file:e.file}})},async onDownloadLog(e){try{let t=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},i=`/api/_action/infoplus/logs/${encodeURIComponent(e.file)}/download`,s=await fetch(i,{method:"GET",headers:t});if(!s.ok)throw Error("Download failed: "+s.statusText);let n=await s.blob(),o=document.createElement("a");o.href=window.URL.createObjectURL(n),o.download=e.file,o.click(),window.URL.revokeObjectURL(o.href)}catch(e){this.error=this.$tc("infoplus.notifications.error.downloadFailed",0,{message:e.message})}},onRowAction(e,t){"view"===e?this.onViewLog(t):"download"===e&&this.onDownloadLog(t)}}});let{Component:r,Mixin:c}=Shopware;r.register("infoplus-sync-settings",{template:'<template>\n    <sw-container>\n        <sw-card :title="$tc(\'infoplus.settings.syncSettings\')" :isLoading="isLoading"\n                 style="margin-top:20px;">\n            <infoplus-switch :label="$tc(\'infoplus.syncCategories\')"\n                             name="InfoPlusCommerce.config.syncCategories" style="margin-top:-10px;"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncProducts\')"\n                             name="InfoPlusCommerce.config.syncProducts"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncCustomers\')"\n                             name="InfoPlusCommerce.config.syncCustomers"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncOrders\')" name="InfoPlusCommerce.config.syncOrders"/>\n            <infoplus-switch :label="$tc(\'infoplus.syncInventory\')"\n                             name="InfoPlusCommerce.config.syncInventory"/>\n            <sync-button/>\n        </sw-card>\n    </sw-container>\n</template>\n',mixins:[c.getByName("notification")],data(){return{isLoading:!1,activeTab:"sync-settings",config:{apiKey:"",baseDomain:"",warehouseId:""}}},created(){this.systemConfigApiService=Shopware.Service("systemConfigApiService"),this.loadConfig()},methods:{loadConfig(){this.isLoading=!0,this.systemConfigApiService.getValues("InfoPlusCommerce").then(e=>{this.config.apiKey=e["InfoPlusCommerce.config.apiKey"]||"",this.config.baseDomain=e["InfoPlusCommerce.config.baseDomain"]||"",this.config.warehouseId=e["InfoPlusCommerce.config.warehouseId"]||"",this.isLoading=!1})},saveConfig(){this.isLoading=!0;let e={"InfoPlusCommerce.config.apiKey":this.config.apiKey,"InfoPlusCommerce.config.baseDomain":this.config.baseDomain,"InfoPlusCommerce.config.warehouseId":this.config.warehouseId};this.systemConfigApiService.saveValues(e).finally(()=>{this.isLoading=!1,this.createNotificationSuccess({title:this.$tc("infoplus.sync.success"),message:this.$tc("infoplus.sync.configurationSaved")})})}}});let{Component:l,Mixin:d}=Shopware;l.register("infoplus-new-category",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content">\n                <h1>{{ $tc(\'infoplus.category.addTitle\') }}</h1>\n                <sw-text-field\n                        v-model:value="categoryName"\n                        :label="$tc(\'infoplus.category.name\')"\n                        name="categoryName"\n                        :placeholder="$tc(\'infoplus.category.namePlaceholder\')"\n                        :disabled="isLoading"\n                ></sw-text-field>\n                <sw-checkbox-field\n                        v-model:value="isSubCategory"\n                        :label="$tc(\'infoplus.category.subCategory\')"\n                        name="isSubCategory"\n                        :disabled="isLoading"/>\n                <sw-button\n                        variant="primary"\n                        :disabled="isLoading"\n                        @click="saveCategory"\n                >\n                    {{ $tc(\'infoplus.category.save\') }}\n                </sw-button>\n                <sw-button\n                        variant="ghost"\n                        :disabled="isLoading"\n                        @click="$router.back()"\n                >\n                    {{ $tc(\'infoplus.category.cancel\') }}\n                </sw-button>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["notification"],mixins:[d.getByName("notification")],data(){return{categoryName:"",isSubCategory:!1,isLoading:!1}},created(){this.isSubCategory=this.$route.params.isSubCategory||!1},methods:{async saveCategory(){if(!this.categoryName.trim()){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.categoryNameRequired")});return}this.isLoading=!0;try{let e=await fetch("/api/_action/infoplus/createCategory",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({name:this.categoryName,isSubCategory:this.isSubCategory})});if(!e.ok)throw Error("Failed to create category");let t=await e.json();t.success?(this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:t.message||this.$tc("infoplus.notifications.success.categoryCreated")}),this.$router.back()):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:t.message||this.$tc("infoplus.notifications.error.failedToCreateCategory",0,{message:""})})}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToCreateCategory",0,{message:e.message})})}finally{this.isLoading=!1}}}});let{Component:u,Mixin:p}=Shopware;u.register("infoplus-edit-category",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content">\n                <h1>{{ $tc(\'infoplus.category.editTitle\') }}</h1>\n                <sw-text-field\n                        v-model:value="categoryName"\n                        :label="$tc(\'infoplus.category.name\')"\n                        name="categoryName"\n                        :placeholder="$tc(\'infoplus.category.namePlaceholder\')"\n                        :disabled="isLoading"\n                ></sw-text-field>\n\n                <sw-button\n                        variant="primary"\n                        :disabled="isLoading"\n                        @click="saveCategory"\n                >\n                    {{ $tc(\'infoplus.category.save\') }}\n                </sw-button>\n                <sw-button\n                        variant="ghost"\n                        :disabled="isLoading"\n                        @click="$router.back()"\n                >\n                    {{ $tc(\'infoplus.category.cancel\') }}\n                </sw-button>\n            </div>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["notification"],mixins:[p.getByName("notification")],data(){return{category:null,categoryName:"",isLoading:!1}},computed:{isSubCategory(){return this.$route.params.isSubCategory||!1}},created(){this.loadCategory()},methods:{async loadCategory(){this.isLoading=!0;try{let e=await fetch(`/api/_action/infoplus/getCategory/${this.$route.params.id}`,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!e.ok)throw Error("Failed to fetch category");let t=await e.json();this.category=t,this.categoryName=t.name||""}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToFetchCategory",0,{message:e.message})}),this.$router.push({name:"infoplus-categories"})}finally{this.isLoading=!1}},async saveCategory(){if(!this.categoryName.trim()){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.categoryNameRequired")});return}this.isLoading=!0;try{let e=await fetch(`/api/_action/infoplus/updateCategory/${this.$route.params.id}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({name:this.categoryName,isSubCategory:this.isSubCategory})});if(!e.ok)throw Error("Failed to update category");let t=await e.json();t.success?(this.createNotificationSuccess({title:this.$tc("infoplus.notifications.successTitle"),message:t.message||this.$tc("infoplus.notifications.success.categoryUpdated")}),this.$router.back()):this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:t.message||this.$tc("infoplus.notifications.error.failedToUpdateCategory",0,{message:""})})}catch(e){this.createNotificationError({title:this.$tc("infoplus.notifications.errorTitle"),message:this.$tc("infoplus.notifications.error.failedToUpdateCategory",0,{message:e.message})})}finally{this.isLoading=!1}}}}),Shopware.Component.register("infoplus-log-detail",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <div class="infoplus-content" style="display: flex; justify-content: flex-end; margin-bottom: 20px;">\n                <sw-button variant="secondary" @click="$router.back()">{{ $tc(\'infoplus.logs.back\') }}</sw-button>\n            </div>\n            <sw-card :title="$tc(\'infoplus.logs.title\', 0, { file: file })" :is-loading="isLoading">\n                <template v-if="error">\n                    <sw-alert variant="error">{{ error }}</sw-alert>\n                </template>\n                <template v-else>\n                    <div class="log-content" style="overflow-x: scroll">\n                        <div v-for="line in lines" :key="lineIndex(line)" style="margin: 5px 0;">\n                            <pre>{{ line }}</pre>\n                        </div>\n                    </div>\n                    <sw-pagination\n                            :total="totalLines"\n                            :limit="pagination.limit"\n                            :page="pagination.page"\n                            @page-change="onPageChange"\n                    />\n                    <sw-button @click="downloadLog">{{ $tc(\'infoplus.logs.download\') }}</sw-button>\n                </template>\n            </sw-card>\n        </sw-card-view>\n    </template>\n</sw-page>',inject:["infoplusLogApiService"],props:{file:{type:String,required:!0}},data(){return{lines:[],isLoading:!0,error:null,pagination:{page:1,limit:50},totalLines:0}},created(){this.loadLogContent()},methods:{async loadLogContent(){this.isLoading=!0,this.error=null;try{let e=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},t={Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`,"sw-context-token":Shopware.Context.api.contextToken,...e},i=`/api/_action/infoplus/logs/${encodeURIComponent(this.file)}/content?page=${this.pagination.page}&limit=${this.pagination.limit}`,s={method:"GET",headers:t,Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},n=await fetch(i,s);if(!n.ok)throw Error(`Failed to load log content: ${n.status} ${n.statusText}`);let o=await n.json();this.lines=o.lines||[],this.totalLines=o.total||0}catch(e){this.error=this.$tc("infoplus.logs.errors.failedToLoadLog",0,{details:e.message})||this.$tc("infoplus.logs.errors.failedToLoadLogGeneric")}finally{this.isLoading=!1}},onPageChange(e){this.pagination.page=e.page,this.pagination.limit=e.limit,this.loadLogContent()},lineIndex(e){return`${this.pagination.page}-${e}`},async downloadLog(){try{let e=this.infoplusLogApiService.getBasicHeaders?this.infoplusLogApiService.getBasicHeaders():{},t=`/api/_action/infoplus/logs/${encodeURIComponent(this.file)}/download`,i=await fetch(t,{method:"GET",headers:e});if(!i.ok)throw Error("Download failed: "+i.statusText);let s=await i.blob(),n=document.createElement("a");n.href=window.URL.createObjectURL(s),n.download=this.file,n.click(),window.URL.revokeObjectURL(n.href)}catch(e){this.error=this.$tc("infoplus.logs.errors.downloadFailed",0,{message:e.message})}}}});let{Criteria:h}=Shopware.Data;Shopware.Component.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n    <sw-card\n            :title="$tc(\'infoplus.common.detailsCardTitle\')"\n            position-identifier="infoplus-details"\n    >\n        <template>\n            <div>\n                <span class="infoplus_message"> {{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncOrder"\n                >\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n        </template>\n\n    </sw-card>\n\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1,infoPollInterval:null}},created(){this.loadIInfoplusInformation(),this.infoPollInterval=setInterval(()=>{this.loadIInfoplusInformation()},3e4)},beforeDestroy(){this.infoPollInterval&&clearInterval(this.infoPollInterval)},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},loadIInfoplusInformation(){let e=this.$route.params.id||this.order?.id,t=this.repositoryFactory.create("infoplus_order_sync"),i=new h;i.addFilter(h.equals("shopwareOrderId",e)),t.search(i,Shopware.Context.api).then(e=>{if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.syncDate),this.message=`${this.$tc("infoplus.order.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.order.errors.failedToGetData")} ${e.message}`})})},async syncOrder(){let e=this.$route.params.id||this.order?.id;if(!(this.order?.transactions||[]).some(e=>e.stateMachineState?.technicalName==="paid")){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.order.errors.paymentNotPaid")});return}if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.order.errors.missingId")});return}this.message=this.$tc("infoplus.order.syncing"),this.isInProgress=!0,fetch(`/api/_action/infoplus/sync/order/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw this.isInProgress=!1,Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{e&&e.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.order.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):e&&e.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(e.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.order.errors.failedToRetrieveInfo")})}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.order.errors.failedToSync")} ${e.message}`})}).finally(()=>{this.isInProgress=!1})}}});let{Criteria:g,EntityCollection:f}=Shopware.Data;Shopware.Component.override("sw-product-detail-base",{template:'{% block sw_product_detail_base_basic_info_card %}\n    <sw-card\n            :title="$tc(\'infoplus.common.detailsCardTitle\')"\n            position-identifier="infoplus-details"\n    >\n        <template>\n            <div>\n                <span class="infoplus_message">{{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncProduct"\n                >\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n            <hr style="margin: 40px -20px; border: 1px solid #e0e0e0;">\n            <div>\n                <sw-entity-single-select\n                        entity="infoplus_category"\n                        v-model:value="selectedCategory"\n                        required\n                        :label="$tc(\'infoplus.product.selectCategoryLabel\')"\n                        :placeholder="$tc(\'infoplus.product.selectCategoryPlaceholder\')"\n                        :criteria="categoryCriteria"\n                        @update:value="onCategoryChange"\n                >\n                </sw-entity-single-select>\n                <sw-entity-single-select\n                        entity="infoplus_category"\n                        v-model:value="selectedSubCategory"\n                        required\n                        :label="$tc(\'infoplus.product.selectSubCategoryLabel\')"\n                        :placeholder="$tc(\'infoplus.product.selectSubCategoryPlaceholder\')"\n                        :criteria="subCategoryCriteria"\n                        @update:value="onSubCategoryChange"\n                >\n                </sw-entity-single-select>\n            </div>\n        </template>\n    </sw-card>\n\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1,selectedCategory:null,selectedSubCategory:null,selectedCategoryInternalId:null,selectedSubCategoryInternalId:null}},created(){this.loadProduct(),this.loadInfoplusInformation()},computed:{categoryCriteria(){let e=new g;return e.addFilter(g.equals("isSubCategory",0)),e.setLimit(50),e},subCategoryCriteria(){let e=new g;return e.addFilter(g.equals("isSubCategory",1)),e.setLimit(50),e}},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},async loadProduct(){let e=this.$route.params.id||this.product?.id;if(!e){console.error("Product ID not found");return}let t=this.repositoryFactory.create("product"),i=new g;i.addFilter(g.equals("id",e));try{this.product=await t.get(e,Shopware.Context.api,i),await this.loadCustomFields()}catch(e){console.error("Load Product Error:",e),this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:`${this.$tc("infoplus.product.errors.failedToLoad")} ${e.message}`})}},async loadInfoplusInformation(){let e=this.$route.params.id||this.product?.id;if(!e){console.error("Product ID not found for Infoplus information");return}let t=this.repositoryFactory.create("infoplus_id_mapping"),i=new g;i.addFilter(g.equals("entityType","item")),i.addFilter(g.equals("shopwareId",e));try{let e=await t.search(i,Shopware.Context.api);if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.updatedAt||t.createdAt),this.message=`${this.$tc("infoplus.product.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}catch(e){console.error("Infoplus Information Error:",e),this.createNotificationError({title:this.$tc("infoplus.syncErrorTitle"),message:`${this.$tc("infoplus.product.errors.failedToGetData")} ${e.message}`})}},async loadCustomFields(){if(!this.product?.customFields){this.selectedCategory=null,this.selectedSubCategory=null,this.selectedCategoryInternalId=null,this.selectedSubCategoryInternalId=null,console.log("No product_infoplus_data custom fields found");return}let e=this.repositoryFactory.create("infoplus_category"),t=this.product.customFields.infoplus_major_group_id,i=this.product.customFields.infoplus_sub_group_id;if(t){let i=new g;i.addFilter(g.equals("internalId",t));try{let t=await e.search(i,Shopware.Context.api);t&&t.length>0?(this.selectedCategory=t[0].id,this.selectedCategoryInternalId=t[0].internalId):(this.selectedCategory=null,this.selectedCategoryInternalId=null)}catch(e){console.error("Load Category Error:",e)}}else this.selectedCategory=null,this.selectedCategoryInternalId=null;if(i){let t=new g;t.addFilter(g.equals("internalId",i));try{let i=await e.search(t,Shopware.Context.api);i&&i.length>0?(this.selectedSubCategory=i[0].id,this.selectedSubCategoryInternalId=i[0].internalId):(this.selectedSubCategory=null,this.selectedSubCategoryInternalId=null)}catch(e){console.error("Load SubCategory Error:",e)}}else this.selectedSubCategory=null,this.selectedSubCategoryInternalId=null},async onCategoryChange(e,t){if(this.selectedCategory=e,this.selectedCategoryInternalId=t?t.internalId:null,!this.product){console.error("Product not loaded");return}this.product.customFields||(this.product.customFields={}),this.product.customFields.infoplus_major_group_id=this.selectedCategoryInternalId},async onSubCategoryChange(e,t){if(this.selectedSubCategory=e,this.selectedSubCategoryInternalId=t?t.internalId:null,!this.product){console.error("Product not loaded");return}this.product.customFields||(this.product.customFields={}),this.product.customFields.infoplus_sub_group_id=this.selectedSubCategoryInternalId},async syncProduct(){let e=this.$route.params.id||this.product?.id;if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.product.errors.missingId")});return}if(!this.product.customFields?.infoplus_major_group_id||!this.product.customFields?.infoplus_sub_group_id){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.product.errors.categoryRequired")});return}this.message=this.$tc("infoplus.product.syncing"),this.isInProgress=!0;try{let t=await fetch(`/api/_action/infoplus/sync/product/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}});if(!t.ok)throw Error(`HTTP error! status: ${t.status}`);let i=await t.json();i&&i.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.product.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):i&&i.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(i.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.product.errors.failedToRetrieveInfo")})}catch(e){console.error("Sync Product Error:",e),this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.product.errors.failedToSync")} ${e.message}`})}finally{this.isInProgress=!1}}}});let{Criteria:m}=Shopware.Data;Shopware.Component.override("sw-customer-detail-base",{template:'{% block sw_customer_detail_base_info_holder %}\n    <sw-card :title="$tc(\'infoplus.common.detailsCardTitle\')" position-identifier="infoplus-details">\n        <template>\n            <div>\n                <span class="infoplus_message"> {{ message }}</span>\n                <sw-button\n                        class="infoplus_button"\n                        :disabled="isInProgress"\n                        variant="primary"\n                        @click="syncCustomer">\n                    {{ $tc(\'infoplus.common.syncWithInfoplus\') }}\n                </sw-button>\n            </div>\n        </template>\n    </sw-card>\n    {% parent %}\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],data(){return{isSynced:!1,syncedDate:null,message:this.$tc("infoplus.sync.neverSynchronized"),isInProgress:!1}},created(){this.loadIInfoplusInformation()},methods:{resolveMessage(e){return"string"==typeof e&&e.startsWith("infoplus.")?this.$tc(e):e},loadIInfoplusInformation(){let e=this.$route.params.id||this.customer?.id,t=this.repositoryFactory.create("infoplus_id_mapping"),i=new m;i.addFilter(m.equals("entityType","customer")),i.addFilter(m.equals("shopwareId",e)),t.search(i,Shopware.Context.api).then(e=>{if(e&&e.length>0){let t=e[0];this.isSynced=!0,this.syncedDate=new Date(t.updatedAt||t.createdAt),this.message=`${this.$tc("infoplus.customer.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()} ${this.syncedDate.toLocaleTimeString()}`}else this.isSynced=!1,this.syncedDate=null,this.message=this.$tc("infoplus.sync.neverSynchronized")}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.customer.errors.failedToGetData")} ${e.message}`})})},async syncCustomer(){let e=this.$route.params.id||this.customer?.id;if(!e){this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.$tc("infoplus.customer.errors.missingId")});return}this.isInProgress=!0,this.message=this.$tc("infoplus.customer.syncing"),fetch(`/api/_action/infoplus/sync/customer/${e}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}).then(e=>{if(!e.ok)throw this.isInProgress=!1,Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{e&&e.success?(this.isSynced=!0,this.syncedDate=new Date,this.message=`${this.$tc("infoplus.customer.syncedAtPrefix")} ${this.syncedDate.toLocaleDateString()+" "+this.syncedDate.toLocaleTimeString()}`,this.createNotificationSuccess({title:this.$tc("infoplus.common.syncSuccessTitle"),message:this.message})):e&&e.error?this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:this.resolveMessage(e.error)}):this.createNotificationError({title:this.$tc("infoplus.common.errorTitle"),message:this.$tc("infoplus.customer.errors.failedToRetrieveInfo")})}).catch(e=>{this.createNotificationError({title:this.$tc("infoplus.common.syncErrorTitle"),message:`${this.$tc("infoplus.customer.errors.failedToSync")} ${e.message}`})}).finally(()=>{this.isInProgress=!1})}}}),i(697);let{Component:y,Mixin:w}=Shopware;y.register("infoplus-settings",{template:'<sw-page>\n    <template #content>\n        <sw-card-view>\n            <sw-tabs\n                    :active-item="activeTab"\n                    class="infoplus-content"\n                    position-identifier="infoplus-settings"\n                    :small="false">\n\n                <sw-tabs-item name="sync-settings"\n                              @click.native="activeTab = \'sync-settings\'"\n                              :is-active="activeTab === \'sync-settings\'"\n                              :route="{ name: \'infoplus.settings.index.sync\' }">\n                    {{ $tc(\'infoplus.settings.syncSettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="category-settings"\n                              :route="{ name: \'infoplus.settings.index.categories\', params: { isSubCategory: false } }">\n                    {{ $tc(\'infoplus.settings.categorySettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="sub-category-settings"\n                              :route="{ name: \'infoplus.settings.index.subCategories\', params: { isSubCategory: true } }">\n                    {{ $tc(\'infoplus.settings.subCategorySettings\') }}\n                </sw-tabs-item>\n                <sw-tabs-item name="error-log-settings"\n                              :route="{ name: \'infoplus.settings.index.logs\' }">\n                    {{ $tc(\'infoplus.settings.logInfo\') }}\n                </sw-tabs-item>\n            </sw-tabs>\n            <router-view></router-view>\n        </sw-card-view>\n    </template>\n</sw-page>',mixins:[w.getByName("notification")],data(){return{isLoading:!1,activeTab:"sync-settings"}}});let{Module:C}=Shopware;C.register("infoplus-settings",{type:"plugin",name:"infoplus-settings",title:"infoplus.settings.title",description:"infoplus.settings.description",color:"#000000",icon:"regular-cog",routes:{index:{component:"infoplus-settings",path:"index",children:{sync:{component:"infoplus-sync-settings",path:"sync"},categories:{component:"infoplus-categories",path:"categories",parameters:{isSubCategory:!1}},subCategories:{component:"infoplus-categories",path:"subCategories",parameters:{isSubCategory:!0}},logs:{component:"log-viewer",path:"logs"}}},addCategory:{component:"infoplus-new-category",path:"addCategory/:isSubCategory"},editCategory:{component:"infoplus-edit-category",path:"editCategory/:isSubCategory/:id"},logDetail:{component:"infoplus-log-detail",path:"logDetail/:file",props:{default:!0}}},settingsItem:{group:"system",to:"infoplus.settings.index.sync",icon:"regular-cog"}});let{ApiService:$}=Shopware.Classes;class S extends ${constructor(e,t){super(e,t,"infoplus"),this.name="infoplusLogApiService"}getLogs(){let e=this.getBasicHeaders();return this.httpClient.get("_action/infoplus/logs",{headers:e}).then($.handleResponse)}getLog(e){let t=this.getBasicHeaders();return this.httpClient.get(`/_action/infoplus/logs/${encodeURIComponent(e)}`,{headers:t}).then($.handleResponse)}}Shopware.Application.addServiceProvider("infoplusLogApiService",e=>new S(Shopware.Application.getContainer("init").httpClient,e.loginService))}()}();